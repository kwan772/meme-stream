{"version":3,"sources":["assets/memeBGM.mp3","assets/bell.mp3","App.js","reportWebVitals.js","index.js"],"names":["App","useState","meme","setMeme","currentMeme","setCurrentMeme","nextMeme","setNextMeme","seconds","setSeconds","displayCurrent","setDisplayCurrent","length","setLength","WEEK_IN_MS","TEN_MIN_IN_MS","onMusic","setOnMusic","Audio","memeBGM","bgm","shuffle","array","randomIndex","currentIndex","Math","floor","random","useEffect","getData","setTimeout","media","console","log","fetch","then","res","json","data","Object","keys","title","shuffleMeme","i","push","score","isFound","updateData","timeLeft","currentTime","Date","getTime","execTime","setHours","setInterval","className","style","height","display","replace","alt","src","onError","e","target","onerror","onClick","pause","play","loop","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68e1e042.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/memeBGM.4ff86e69.mp3\";","export default __webpack_public_path__ + \"static/media/bell.05d85813.mp3\";","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport memeBGM from \"./assets/memeBGM.mp3\";\nimport useSound from 'use-sound';\nimport bellSound from \"./assets/bell.mp3\"\n\n\nfunction App() {\n  const [meme,setMeme] = useState([])\n  const [currentMeme,setCurrentMeme] = useState(0)\n  const [nextMeme,setNextMeme] = useState(currentMeme+1)\n  const [seconds,setSeconds] = useState(15)\n  const [displayCurrent, setDisplayCurrent] = useState(true)\n  const [length,setLength] = useState()\n  const CLOCK = 15\n  const WEEK_IN_MS = 604800000\n  const TEN_MIN_IN_MS = 600000\n  const [onMusic,setOnMusic] = useState(false)\n  const [bgm, setBgm] = useState(new Audio(memeBGM))\n\n  const play = () => {\n    if(onMusic){\n      setOnMusic(false)\n      bgm.pause()\n    }\n    else{\n      setOnMusic(true)\n      bgm.play()\n      bgm.loop = true\n    \n    }\n      \n      \n  }\n\n  useEffect(() => {\n      getData()\n  },[])\n\n\n  useEffect(() => {\n    setTimeout(() => {\n      if(seconds!==0){\n      setSeconds(seconds-1)}\n      else{\n        if(displayCurrent){\n          setDisplayCurrent(false)\n          if(length>(nextMeme+1)){\n\n            setCurrentMeme(nextMeme+1)\n            while(!meme[currentMeme].media && meme[currentMeme].media===''){\n              setCurrentMeme(nextMeme+1)\n            }\n          \n          }\n          else{\n            setMeme(shuffle(meme))\n            setCurrentMeme(0)\n          }\n\n        }\n        else{\n          setDisplayCurrent(true)\n          if(length>(currentMeme+1)){\n            setNextMeme(currentMeme+1)\n            while(!meme[nextMeme].media && meme[nextMeme].media===''){\n              setCurrentMeme(nextMeme+1)\n            }\n          \n          }\n          else{\n            setMeme(shuffle(meme))\n            setNextMeme(0)\n          }\n        }\n        setSeconds(CLOCK)\n        \n      }\n    }, 1000);\n    \n  }, [seconds])\n\n  useEffect(()=>{\n    console.log(meme)\n  },[meme])\n\n  function shuffle(array) {\n    let currentIndex = array.length\n    let randomIndex\n\n    while (currentIndex != 0) {\n\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    \n    return array\n      \n    }\n\n    const getData = () => {\n      fetch(\"/members\").then(\n        res => res.json()\n      )\n      .then(data => {\n        setLength(Object.keys(data.title).length)\n        let shuffleMeme = []\n        for (var i =0; i<Object.keys(data.title).length; i++){\n      //   setMeme(preState => [\n      //     ...preState, {media:data.media['?',i],\n      //   score:data.score['?',i],\n      // title:data.title['?',i]}\n      //   ])\n  \n          shuffleMeme.push({media:data.media['?',i],\n             score:data.score['?',i],\n           title:data.title['?',i]})\n  \n  \n      }\n      setMeme(shuffle(shuffleMeme))\n      if(shuffleMeme.length > 0) {\n        fetch(\"/checkImage?src=\"+shuffleMeme[currentMeme].media)\n        .then(res => {\n          return res.json()\n        })\n        .then(isFound => {\n          console.log(isFound)\n          if (isFound === 404){\n            setCurrentMeme(currentMeme+1)\n            setNextMeme(currentMeme+2)\n            console.log(\"skipped\")\n          }\n        }) \n      }\n      if(shuffleMeme.length > 0) {\n        fetch(\"/checkImage?src=\"+shuffleMeme[nextMeme].media)\n        .then(res => {\n          return res.json()\n        })\n        .then(isFound => {\n          console.log(isFound)\n          if (isFound === 404){\n            setNextMeme(nextMeme+1)\n            console.log(\"skipped\")\n          }\n        }) \n      }\n      })\n    }\n\n    const updateData = () => {\n      fetch(\"/updateMeme\")\n    }\n\n    useEffect(() => {\n\n      const currentTime = new Date().getTime();  //current unix timestamp\n      const execTime = new Date().setHours(22,9,0);  //API call time = today at 20:00\n      let timeLeft;\n      if(currentTime < execTime) {\n        //it's currently earlier than 20:00\n        timeLeft = execTime - currentTime;\n      } else {\n        //it's currently later than 20:00, schedule for tomorrow at 20:00\n        timeLeft = execTime + WEEK_IN_MS - currentTime\n      }\n      console.log(timeLeft)\n      \n      setTimeout(function() {\n\n        updateData()\n          setTimeout(function() {\n            getData()\n          }, TEN_MIN_IN_MS)\n\n        setInterval(function() {\n          updateData()\n          setTimeout(function() {\n            getData()\n          }, TEN_MIN_IN_MS)\n    \n        }, WEEK_IN_MS);  //repeat every week\n      }, timeLeft);  //wait until 20:00 as calculated above\n    },[])\n\n    useEffect(() => {\n      if(meme.length > 0) {\n      fetch(\"/checkImage?src=\"+meme[currentMeme].media)\n      .then(res => {\n        return res.json()\n      })\n      .then(isFound => {\n        console.log(isFound)\n        if (isFound === 404){\n          if(length>(currentMeme+2)){\n          setCurrentMeme(currentMeme+1)\n          setNextMeme(currentMeme+2)\n          console.log(\"skipped\")\n          }\n          else{\n            setMeme(shuffle(meme))\n            setCurrentMeme(0)\n          }\n        }\n      }) \n    }\n    },[currentMeme])\n\n    useEffect(() => {\n      if(meme.length > 0) {\n        fetch(\"/checkImage?src=\"+meme[nextMeme].media)\n        .then(res => {\n          return res.json()\n        })\n        .then(isFound => {\n          console.log(isFound)\n          if (isFound === 404){\n            if(length>(nextMeme+2)){\n              setNextMeme(nextMeme+1)\n              setCurrentMeme(nextMeme+2)\n              console.log(\"skipped\")\n            }\n            else{\n              setMeme(shuffle(meme))\n              setNextMeme(0)\n            }\n          }\n        })\n      }\n       \n    },[nextMeme])\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      {meme[currentMeme+1]?        <div style={{height:\"950px\"}}>\n\n        <div  style={displayCurrent?{height:\"950px\"}:{height:\"950px\",display:'none'}}>\n            <h3>{meme[currentMeme].title.replace(\"fuck\",\"****\").replace(\"shit\",\"****\").replace(\"Bitch\",\"*****\").replace(\"Fuck\",\"****\").replace(\"Shit\",\"****\").replace(\"Bitch\",\"*****\").replace(\"FUCK\",\"****\").replace(\"SHIT\",\"****\").replace(\"BITCH\",\"*****\").replace(\"cunt\",\"****\").replace(\"CUNT\",\"****\").replace(\"Cunt\",\"****\").replace(\"nigger\",\"*****\").replace(\"NIGGER\",\"*****\").replace(\"Nigger\",\"******\")}</h3>\n            <div className='memeBox'>\n            <img alt=\"current meme\" src={meme[currentMeme].media} onError={(e) => {\n              if(length>(currentMeme+1)){\n              if(currentMeme > nextMeme){\n                setCurrentMeme(currentMeme+1)\n              }\n              \n              console.log(meme[currentMeme].media)\n              console.log(\"error img\")\n              e.target.onerror = null\n              e.target.src=meme[currentMeme].media\n            }\n            else{\n              setMeme(shuffle(meme))\n              setCurrentMeme(0)\n              console.log(\"error img\")\n              e.target.onerror = null\n              e.target.src=meme[currentMeme].media\n            }}}></img>\n            </div>\n            </div>\n\n            <div style={displayCurrent?{height:\"950px\",display:'none'}:{height:\"950px\"}}>\n            <h3>{meme[nextMeme].title.replace(\"fuck\",\"****\").replace(\"shit\",\"****\").replace(\"Bitch\",\"*****\").replace(\"Fuck\",\"****\").replace(\"Shit\",\"****\").replace(\"Bitch\",\"*****\").replace(\"FUCK\",\"****\").replace(\"SHIT\",\"****\").replace(\"BITCH\",\"*****\").replace(\"cunt\",\"****\").replace(\"CUNT\",\"****\").replace(\"Cunt\",\"****\").replace(\"nigger\",\"*****\").replace(\"NIGGER\",\"*****\").replace(\"Nigger\",\"******\")}</h3>\n            <div className='memeBox'>\n            <img alt=\"next meme\" src={meme[nextMeme].media} onError={(e) => {\n              if(length>(nextMeme+1)){\n                setNextMeme(nextMeme+1)\n                console.log(meme[nextMeme].media)\n                console.log(\"error img\")\n                e.target.onerror = null\n                e.target.src=meme[nextMeme].media\n              }\n              else{\n                setMeme(shuffle(meme))\n                setNextMeme(0)\n                console.log(\"error img\")\n                e.target.onerror = null\n                e.target.src=meme[nextMeme].media\n              }\n            }}></img>\n            </div>\n            </div>\n          </div>:null}\n        <span className=\"timer\">{seconds}</span>\n      </header>\n\n      {/* <img src={\"https://i.redd.it/rs7pju6muo881.jpg\"} \n      onError={({ currentTarget }) => {\n        currentTarget.onerror = null; // prevents looping\n        currentTarget.src=\"https://i.redd.it/u6anbsaoed381.jpg\";\n      }}\n      \n    ></img> */}\n\n<button onClick={play} style={{marginTop:1000}}>Boop!</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}