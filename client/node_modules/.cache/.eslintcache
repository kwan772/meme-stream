[{"/Users/kevii/Desktop/memeApp/my-app/src/index.js":"1","/Users/kevii/Desktop/memeApp/my-app/src/reportWebVitals.js":"2","/Users/kevii/Desktop/memeApp/my-app/src/App.js":"3","/Users/kevii/Desktop/memeApp/my-app/src/MyStopwatch.js":"4","/Users/kevii/Desktop/git-meme-stream/meme-stream/client/src/index.js":"5","/Users/kevii/Desktop/git-meme-stream/meme-stream/client/src/reportWebVitals.js":"6","/Users/kevii/Desktop/git-meme-stream/meme-stream/client/src/App.js":"7"},{"size":500,"mtime":1638680427109,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1638658524465,"results":"10","hashOfConfig":"9"},{"size":8775,"mtime":1645155807666,"results":"11","hashOfConfig":"9"},{"size":693,"mtime":1638681902260,"results":"12","hashOfConfig":"9"},{"size":500,"mtime":1638680427109,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1638658524465,"results":"15","hashOfConfig":"14"},{"size":8775,"mtime":1645155807666,"results":"16","hashOfConfig":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"tblmv3",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jnzr6z",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/Users/kevii/Desktop/memeApp/my-app/src/index.js",[],["35","36"],"/Users/kevii/Desktop/memeApp/my-app/src/reportWebVitals.js",[],"/Users/kevii/Desktop/memeApp/my-app/src/App.js",["37","38","39","40","41","42","43","44","45","46","47","48"],"/Users/kevii/Desktop/memeApp/my-app/src/MyStopwatch.js",["49","50","51"],"import React from 'react';\nimport { useStopwatch } from 'react-timer-hook';\n\nconst MyStopwatch = () => {\n  var {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    reset,\n  } = useStopwatch({ autoStart: true });\n  seconds = 30\n\n\n  return (\n    <div style={{textAlign: 'center'}}>\n      <h1>react-timer-hook</h1>\n      <p>Stopwatch Demo</p>\n      <div style={{fontSize: '100px'}}>\n       <span>{seconds}</span>\n      </div>\n      <p>{isRunning ? 'Running' : 'Not running'}</p>\n      <button onClick={start}>Start</button>\n      <button onClick={pause}>Pause</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n}\n\nexport default MyStopwatch",["52","53"],"/Users/kevii/Desktop/git-meme-stream/meme-stream/client/src/index.js",[],"/Users/kevii/Desktop/git-meme-stream/meme-stream/client/src/reportWebVitals.js",[],"/Users/kevii/Desktop/git-meme-stream/meme-stream/client/src/App.js",["54","55","56","57","58","59","60","61","62","63","64","65"],"import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport memeBGM from \"./assets/memeBGM.mp3\";\nimport useSound from 'use-sound';\nimport bellSound from \"./assets/bell.mp3\"\n\n\nfunction App() {\n  const [meme,setMeme] = useState([])\n  const [currentMeme,setCurrentMeme] = useState(0)\n  const [nextMeme,setNextMeme] = useState(currentMeme+1)\n  const [seconds,setSeconds] = useState(15)\n  const [displayCurrent, setDisplayCurrent] = useState(true)\n  const [length,setLength] = useState()\n  const CLOCK = 15\n  const WEEK_IN_MS = 604800000\n  const TEN_MIN_IN_MS = 600000\n  const [onMusic,setOnMusic] = useState(false)\n  const [bgm, setBgm] = useState(new Audio(memeBGM))\n\n  const play = () => {\n    if(onMusic){\n      setOnMusic(false)\n      bgm.pause()\n    }\n    else{\n      setOnMusic(true)\n      bgm.play()\n      bgm.loop = true\n    \n    }\n      \n      \n  }\n\n  useEffect(() => {\n      getData()\n  },[])\n\n\n  useEffect(() => {\n    setTimeout(() => {\n      if(seconds!==0){\n      setSeconds(seconds-1)}\n      else{\n        if(displayCurrent){\n          setDisplayCurrent(false)\n          if(length>(nextMeme+1)){\n\n            setCurrentMeme(nextMeme+1)\n            while(!meme[currentMeme].media && meme[currentMeme].media===''){\n              setCurrentMeme(nextMeme+1)\n            }\n          \n          }\n          else{\n            setMeme(shuffle(meme))\n            setCurrentMeme(0)\n          }\n\n        }\n        else{\n          setDisplayCurrent(true)\n          if(length>(currentMeme+1)){\n            setNextMeme(currentMeme+1)\n            while(!meme[nextMeme].media && meme[nextMeme].media===''){\n              setCurrentMeme(nextMeme+1)\n            }\n          \n          }\n          else{\n            setMeme(shuffle(meme))\n            setNextMeme(0)\n          }\n        }\n        setSeconds(CLOCK)\n        \n      }\n    }, 1000);\n    \n  }, [seconds])\n\n  useEffect(()=>{\n    console.log(meme)\n  },[meme])\n\n  function shuffle(array) {\n    let currentIndex = array.length\n    let randomIndex\n\n    while (currentIndex != 0) {\n\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    \n    return array\n      \n    }\n\n    const getData = () => {\n      fetch(\"/members\").then(\n        res => res.json()\n      )\n      .then(data => {\n        setLength(Object.keys(data.title).length)\n        let shuffleMeme = []\n        for (var i =0; i<Object.keys(data.title).length; i++){\n      //   setMeme(preState => [\n      //     ...preState, {media:data.media['?',i],\n      //   score:data.score['?',i],\n      // title:data.title['?',i]}\n      //   ])\n  \n          shuffleMeme.push({media:data.media['?',i],\n             score:data.score['?',i],\n           title:data.title['?',i]})\n  \n  \n      }\n      setMeme(shuffle(shuffleMeme))\n      if(shuffleMeme.length > 0) {\n        fetch(\"/checkImage?src=\"+shuffleMeme[currentMeme].media)\n        .then(res => {\n          return res.json()\n        })\n        .then(isFound => {\n          console.log(isFound)\n          if (isFound === 404){\n            setCurrentMeme(currentMeme+1)\n            setNextMeme(currentMeme+2)\n            console.log(\"skipped\")\n          }\n        }) \n      }\n      if(shuffleMeme.length > 0) {\n        fetch(\"/checkImage?src=\"+shuffleMeme[nextMeme].media)\n        .then(res => {\n          return res.json()\n        })\n        .then(isFound => {\n          console.log(isFound)\n          if (isFound === 404){\n            setNextMeme(nextMeme+1)\n            console.log(\"skipped\")\n          }\n        }) \n      }\n      })\n    }\n\n    const updateData = () => {\n      fetch(\"/updateMeme\")\n    }\n\n    useEffect(() => {\n\n      const currentTime = new Date().getTime();  //current unix timestamp\n      const execTime = new Date().setHours(22,9,0);  //API call time = today at 20:00\n      let timeLeft;\n      if(currentTime < execTime) {\n        //it's currently earlier than 20:00\n        timeLeft = execTime - currentTime;\n      } else {\n        //it's currently later than 20:00, schedule for tomorrow at 20:00\n        timeLeft = execTime + WEEK_IN_MS - currentTime\n      }\n      console.log(timeLeft)\n      \n      setTimeout(function() {\n\n        updateData()\n          setTimeout(function() {\n            getData()\n          }, TEN_MIN_IN_MS)\n\n        setInterval(function() {\n          updateData()\n          setTimeout(function() {\n            getData()\n          }, TEN_MIN_IN_MS)\n    \n        }, WEEK_IN_MS);  //repeat every week\n      }, timeLeft);  //wait until 20:00 as calculated above\n    },[])\n\n    useEffect(() => {\n      if(meme.length > 0) {\n      fetch(\"/checkImage?src=\"+meme[currentMeme].media)\n      .then(res => {\n        return res.json()\n      })\n      .then(isFound => {\n        console.log(isFound)\n        if (isFound === 404){\n          if(length>(currentMeme+2)){\n          setCurrentMeme(currentMeme+1)\n          setNextMeme(currentMeme+2)\n          console.log(\"skipped\")\n          }\n          else{\n            setMeme(shuffle(meme))\n            setCurrentMeme(0)\n          }\n        }\n      }) \n    }\n    },[currentMeme])\n\n    useEffect(() => {\n      if(meme.length > 0) {\n        fetch(\"/checkImage?src=\"+meme[nextMeme].media)\n        .then(res => {\n          return res.json()\n        })\n        .then(isFound => {\n          console.log(isFound)\n          if (isFound === 404){\n            if(length>(nextMeme+2)){\n              setNextMeme(nextMeme+1)\n              setCurrentMeme(nextMeme+2)\n              console.log(\"skipped\")\n            }\n            else{\n              setMeme(shuffle(meme))\n              setNextMeme(0)\n            }\n          }\n        })\n      }\n       \n    },[nextMeme])\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      {meme[currentMeme+1]?        <div style={{height:\"950px\"}}>\n\n        <div  style={displayCurrent?{height:\"950px\"}:{height:\"950px\",display:'none'}}>\n            <h3>{meme[currentMeme].title.replace(\"fuck\",\"****\").replace(\"shit\",\"****\").replace(\"Bitch\",\"*****\").replace(\"Fuck\",\"****\").replace(\"Shit\",\"****\").replace(\"Bitch\",\"*****\").replace(\"FUCK\",\"****\").replace(\"SHIT\",\"****\").replace(\"BITCH\",\"*****\").replace(\"cunt\",\"****\").replace(\"CUNT\",\"****\").replace(\"Cunt\",\"****\").replace(\"nigger\",\"*****\").replace(\"NIGGER\",\"*****\").replace(\"Nigger\",\"******\")}</h3>\n            <div className='memeBox'>\n            <img alt=\"current meme\" src={meme[currentMeme].media} onError={(e) => {\n              if(length>(currentMeme+1)){\n              if(currentMeme > nextMeme){\n                setCurrentMeme(currentMeme+1)\n              }\n              \n              console.log(meme[currentMeme].media)\n              console.log(\"error img\")\n              e.target.onerror = null\n              e.target.src=meme[currentMeme].media\n            }\n            else{\n              setMeme(shuffle(meme))\n              setCurrentMeme(0)\n              console.log(\"error img\")\n              e.target.onerror = null\n              e.target.src=meme[currentMeme].media\n            }}}></img>\n            </div>\n            </div>\n\n            <div style={displayCurrent?{height:\"950px\",display:'none'}:{height:\"950px\"}}>\n            <h3>{meme[nextMeme].title.replace(\"fuck\",\"****\").replace(\"shit\",\"****\").replace(\"Bitch\",\"*****\").replace(\"Fuck\",\"****\").replace(\"Shit\",\"****\").replace(\"Bitch\",\"*****\").replace(\"FUCK\",\"****\").replace(\"SHIT\",\"****\").replace(\"BITCH\",\"*****\").replace(\"cunt\",\"****\").replace(\"CUNT\",\"****\").replace(\"Cunt\",\"****\").replace(\"nigger\",\"*****\").replace(\"NIGGER\",\"*****\").replace(\"Nigger\",\"******\")}</h3>\n            <div className='memeBox'>\n            <img alt=\"next meme\" src={meme[nextMeme].media} onError={(e) => {\n              if(length>(nextMeme+1)){\n                setNextMeme(nextMeme+1)\n                console.log(meme[nextMeme].media)\n                console.log(\"error img\")\n                e.target.onerror = null\n                e.target.src=meme[nextMeme].media\n              }\n              else{\n                setMeme(shuffle(meme))\n                setNextMeme(0)\n                console.log(\"error img\")\n                e.target.onerror = null\n                e.target.src=meme[nextMeme].media\n              }\n            }}></img>\n            </div>\n            </div>\n          </div>:null}\n        <span className=\"timer\">{seconds}</span>\n      </header>\n\n      {/* <img src={\"https://i.redd.it/rs7pju6muo881.jpg\"} \n      onError={({ currentTarget }) => {\n        currentTarget.onerror = null; // prevents looping\n        currentTarget.src=\"https://i.redd.it/u6anbsaoed381.jpg\";\n      }}\n      \n    ></img> */}\n\n<button onClick={play} style={{marginTop:1000}}>Boop!</button>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":4,"column":8,"nodeType":"72","messageId":"73","endLine":4,"endColumn":16},{"ruleId":"70","severity":1,"message":"74","line":5,"column":8,"nodeType":"72","messageId":"73","endLine":5,"endColumn":17},{"ruleId":"70","severity":1,"message":"75","line":19,"column":15,"nodeType":"72","messageId":"73","endLine":19,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":38,"column":5,"nodeType":"78","endLine":38,"endColumn":7,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":81,"column":6,"nodeType":"78","endLine":81,"endColumn":15,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":91,"column":25,"nodeType":"84","messageId":"85","endLine":91,"endColumn":27},{"ruleId":"86","severity":1,"message":"87","line":118,"column":49,"nodeType":"88","messageId":"89","endLine":118,"endColumn":50},{"ruleId":"86","severity":1,"message":"87","line":119,"column":34,"nodeType":"88","messageId":"89","endLine":119,"endColumn":35},{"ruleId":"86","severity":1,"message":"87","line":120,"column":32,"nodeType":"88","messageId":"89","endLine":120,"endColumn":33},{"ruleId":"76","severity":1,"message":"77","line":188,"column":7,"nodeType":"78","endLine":188,"endColumn":9,"suggestions":"90"},{"ruleId":"76","severity":1,"message":"91","line":211,"column":7,"nodeType":"78","endLine":211,"endColumn":20,"suggestions":"92"},{"ruleId":"76","severity":1,"message":"91","line":235,"column":7,"nodeType":"78","endLine":235,"endColumn":17,"suggestions":"93"},{"ruleId":"70","severity":1,"message":"94","line":7,"column":5,"nodeType":"72","messageId":"73","endLine":7,"endColumn":12},{"ruleId":"70","severity":1,"message":"95","line":8,"column":5,"nodeType":"72","messageId":"73","endLine":8,"endColumn":10},{"ruleId":"70","severity":1,"message":"96","line":9,"column":5,"nodeType":"72","messageId":"73","endLine":9,"endColumn":9},{"ruleId":"66","replacedBy":"97"},{"ruleId":"68","replacedBy":"98"},{"ruleId":"70","severity":1,"message":"71","line":4,"column":8,"nodeType":"72","messageId":"73","endLine":4,"endColumn":16},{"ruleId":"70","severity":1,"message":"74","line":5,"column":8,"nodeType":"72","messageId":"73","endLine":5,"endColumn":17},{"ruleId":"70","severity":1,"message":"75","line":19,"column":15,"nodeType":"72","messageId":"73","endLine":19,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":38,"column":5,"nodeType":"78","endLine":38,"endColumn":7,"suggestions":"99"},{"ruleId":"76","severity":1,"message":"80","line":81,"column":6,"nodeType":"78","endLine":81,"endColumn":15,"suggestions":"100"},{"ruleId":"82","severity":1,"message":"83","line":91,"column":25,"nodeType":"84","messageId":"85","endLine":91,"endColumn":27},{"ruleId":"86","severity":1,"message":"87","line":118,"column":49,"nodeType":"88","messageId":"89","endLine":118,"endColumn":50},{"ruleId":"86","severity":1,"message":"87","line":119,"column":34,"nodeType":"88","messageId":"89","endLine":119,"endColumn":35},{"ruleId":"86","severity":1,"message":"87","line":120,"column":32,"nodeType":"88","messageId":"89","endLine":120,"endColumn":33},{"ruleId":"76","severity":1,"message":"77","line":188,"column":7,"nodeType":"78","endLine":188,"endColumn":9,"suggestions":"101"},{"ruleId":"76","severity":1,"message":"91","line":211,"column":7,"nodeType":"78","endLine":211,"endColumn":20,"suggestions":"102"},{"ruleId":"76","severity":1,"message":"91","line":235,"column":7,"nodeType":"78","endLine":235,"endColumn":17,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'useSound' is defined but never used.","Identifier","unusedVar","'bellSound' is defined but never used.","'setBgm' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["106"],"React Hook useEffect has missing dependencies: 'currentMeme', 'displayCurrent', 'length', 'meme', and 'nextMeme'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurrentMeme' needs the current value of 'nextMeme'.",["107"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["108"],"React Hook useEffect has missing dependencies: 'length' and 'meme'. Either include them or remove the dependency array. You can also do a functional update 'setMeme(m => ...)' if you only need 'meme' in the 'setMeme' call.",["109"],["110"],"'minutes' is assigned a value but never used.","'hours' is assigned a value but never used.","'days' is assigned a value but never used.",["104"],["105"],["111"],["112"],["113"],["114"],["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"116","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"116","fix":"125"},{"desc":"118","fix":"126"},{"desc":"116","fix":"127"},{"desc":"121","fix":"128"},{"desc":"123","fix":"129"},"Update the dependencies array to be: [getData]",{"range":"130","text":"131"},"Update the dependencies array to be: [currentMeme, displayCurrent, length, meme, nextMeme, seconds]",{"range":"132","text":"133"},{"range":"134","text":"131"},"Update the dependencies array to be: [currentMeme, length, meme]",{"range":"135","text":"136"},"Update the dependencies array to be: [length, meme, nextMeme]",{"range":"137","text":"138"},{"range":"139","text":"131"},{"range":"140","text":"133"},{"range":"141","text":"131"},{"range":"142","text":"136"},{"range":"143","text":"138"},[914,916],"[getData]",[1865,1874],"[currentMeme, displayCurrent, length, meme, nextMeme, seconds]",[4621,4623],[5157,5170],"[currentMeme, length, meme]",[5740,5750],"[length, meme, nextMeme]",[914,916],[1865,1874],[4621,4623],[5157,5170],[5740,5750]]